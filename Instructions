                                   ----- Create A assembler in C lang by Daniel K -----                  
                                                     ---  Instructions ---


  Hardware of the PC:
    CPU - 
      Register -
        Description: Units of memory built in CPU 
        Size in bits: 32 (4 bytes) 
        Number of units: 32 
        Range: 0 - 31 
        Code name: $ . Ex: Register number 1 = $1
        Byte Order: Little Endian (reg 31 most Significant) 
    
    RAM - 
      Description: Memory slot on the motherboard 
      Size in bits: 8 (1 byte)
      Number of units: 2^25 
      range: 0 - (2^25) - 1
      
   Support:
   Integer: possitive, negetive (int)
   Method for negetive integer: 2's complements
   Character: ASCII
   
   Not Support:
   Real number (double): Ex: 1.5, 2.3
   
   Machine Operation -
    Description: actions between bits . Ex: 5 + 3 = 8
    - Operation consist:
    1. Operator 
    2. Operand
    
    -- We need to coding the Machine Operation --
    Description: CPU only understand bits . need to Coding the Machine Operation to 32bit (4 bytes)
    location: RAM
    Size in bits: 32 (4 bytes) in row
    Byte Order: Little Endian (reg 31 most Significant) 
    
    -- The CPU have A Operation Code (opcode) , and so, he know which operator to use --
    
    Table of the OP:
    
                          Name               Type              OP              Funct 
                        Operation          Operation        (decimal)        (decimal)
                      ___________________________________________________________________
                           add                 R                00               01
                           sub                 R                00               02
                           and                 R                00               03
                           or                  R                00               04
                           nor                 R                00               05
                           move                R                01               01
                           mvhi                R                01               02
                           mvlo                R                01               03
                           addi                I                10
                           subi                I                11
                           andi                I                12
                           ori                 I                13
                           nori                I                14 
                           bne                 I                15
                           beq                 I                16
                           blt                 I                17
                           bgt                 I                18
                           lb                  I                19
                           sb                  I                20
                           lw                  I                21
                           sw                  I                22
                           lh                  I                23
                           sh                  I                24
                           jmp                 J                30
                           la                  J                31
                           call                J                32
                           stop                J                63
           
           
           Noice: operation name always writted with upper case 
           
           Type operation:
           R - 
           contain only registers (up to 3)
           
           
           
           
           
           recive output files from writing in assembly lang 
           
    
    
    
    
    
    
    
  

